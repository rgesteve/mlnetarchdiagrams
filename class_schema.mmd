classDiagram 
    class DataViewSchema {
      Count
      Item (index : int ) : DataViewSchema.Column
      Item (name : string)
    }
    class DataViewSchema_Builder {
      AddColumn()
      AddColumns()
      ToSchema() : DataViewSchema
    }
    class DataViewSchema_Column {
      Annotations
      Index
      IsHidden
      Name
      Type : DataViewType
      ToString() : string
    }
    class DataViewType {
      RawType : System.Type
    }
    class PrimitiveDataViewType 
    class KeyDataViewType
    class StructuredDataViewType
    class VectorDataViewType
    class TextDataViewType
    class NumberDataViewType {
      Byte
      SByte 
      Single
      Double
      Int16
      Int32
      Int64
      UInt16
      UInt32
      UInt64
      ToString() : string
    }
    class RowIdDataViewType
    class BooleanDataViewType
    class DateTimeDataViewType
    class DateTimeOffsetDataViewType
    class TimeSpanDataViewType
    class ImageDataViewType
    class OnnxSequenceType
    class OnnxMapType
    DataViewType <-- PrimitiveDataViewType
    PrimitiveDataViewType <-- KeyDataViewType
    PrimitiveDataViewType <-- TextDataViewType
    PrimitiveDataViewType <-- NumberDataViewType
    PrimitiveDataViewType <-- RowIdDataViewType
    PrimitiveDataViewType <-- BooleanDataViewType
    PrimitiveDataViewType <-- DateTimeDataViewType
    PrimitiveDataViewType <-- TimeSpanDataViewType
    PrimitiveDataViewType <-- DateTimeOffsetDataViewType
    DataViewType <-- StructuredDataViewType
    StructuredDataViewType <-- VectorDataViewType
    StructuredDataViewType <-- ImageDataViewType
    StructuredDataViewType <-- OnnxSequenceType
    StructuredDataViewType <-- OnnxMapType

    class DataViewSchema_Annotations {
      Empty
      Schema
      CheckGetter
      GetGetter
      GetGetterInternal
      GetValue
      ToString() : string
    }    

    class SchemaShape {
      Count
      Create(:DataViewSchema) : SchemaShape
      GetColumnTypeShape()
      GetEnumerator()
      IEnumerable.GetEnumerator()
      TryFindColumn()
    }
    class SchemaShape_Column {
      Annotations : SchemaShape
      IsKey : bool 
      IsValid 
      ItemType 
      Kind 
      Name
      GetTypeString()
    }
    IReadOnlyList~SchemaShape_Column~ <-- SchemaShape

    class RoleMappedSchema {
      Feature : DataViewSchema_Column?
      FeatureContributionString 
      FeatureString : string
      Group 
      GroupString : string
      Label : DataViewSchema_Column?
      LabelString : string
      Name 
      NameString : string
      Schema : DataViewSchema
      Weight 
      WeightString : string
      GetColumnRoleNames()
      GetColumnRoleNames(:ColumnRole)
      GetColumnRoles()
      GetColumns()
      GetUniqueColumn(:ColumnRole)
      Add(:Dictionary<string, List<DataViewSchema_Column>>, :ColumnRole, DataViewSchema_Column)
      Copy()
      CreatePair()
      Has()
      HasMultiple(:ColumnRole)
      HasUnique(:ColumnRole)
      MapFromNames()
      PredefinedRolesHelper()
    }
    class ColumnRole {
      Feature : ColumnRole
      FeatureContributions 
      Group 
      Label 
      Name 
      Value 
      Weight 
      Bind(:string)
    }

    class RoleMappedData {
      Data : IDataView
      Schema : RoleMappedSchema
    }