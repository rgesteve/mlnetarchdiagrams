classDiagram 

    class ITransformer {
      GetOutputSchema(:DataViewSchema) : DataViewSchema
      Transform(:IDataView) : IDataView
      IsRowToRowMapper : bool
      GetRowToRowMapper(:DataViewSchema) : IRowToRowMapper
    }
    <<interface>> ITransformer

    class IPredictionTransformer~TModel~ {
      Model : TModel
    }

    ITransformer <-- IPredictionTransformer~TModel~
    
    class IFeaturePredictionTransformer {
        FeatureColumnName : string
        FeatureColumnType : DataViewType
    }

    IPredictionTransformer~TModel~ <-- IFeaturePredictionTransformer

    class PredictionTransformerBase~TModel~ {
        Model 
        ModelAsPredictor : IPredictor
        Host : IHost
        BindableMapper : ISchemaBindableMapper
        TrainSchema : DataViewSchema
        Scorer : RowToRowScorerBase
        InitializeLogic : (:IHost, :ModelLoadContext)
        GetOutputSchema(:DataViewSchema) : DataViewSchema
        Transform( :IDataView )
    }
    class SingleFeaturePredictionTransformerBase~TModel~ {
        FeatureColumnName : string
        FeatureColumnType : DataViewType
        GetGenericScorer: () : GenericScorer
        GetOutputSchema()
        SaveCore()
        SaveModel()
    }
    class RegressionPredictionTransformer~TModel~ {
        SaveCore()
    }
    class BinaryPredictionTransformer~TModel~ {
        ThresholdColumn : string
        Threshold : float
        LabelColumnName : string
        SetScorer() 
        InitializationLogic()
        SaveCore()
    }
    class MulticlassPredictionTransformer~TModel~ {
        _trainLabelColumn : string
        _scoreColumn : string
        _predictedLabelColumn : string
        SetScorer() 
        InitializationLogic()
        SaveCore()
    }
    class ClusteringPredictionTransformer~TModel~ {
        SaveCore(: ModelSaveContext) : void
        GetVersionInfo() : VersionInfo
    }
    class RankingPredictionTransformer~TModel~ {
        SaveCore(: ModelSaveContext) : void
    }

    IPredictionTransformer~TModel~ <-- PredictionTransformerBase  
    PredictionTransformerBase <-- SingleFeaturePredictionTransformerBase~TModel~
    SingleFeaturePredictionTransformerBase~TModel~ <-- RegressionPredictionTransformer~TModel~
    SingleFeaturePredictionTransformerBase~TModel~ <-- BinaryPredictionTransformer~TModel~
    SingleFeaturePredictionTransformerBase~TModel~ <-- ClusteringPredictionTransformer~TModel~
    SingleFeaturePredictionTransformerBase~TModel~ <-- RankingPredictionTransformer~TModel~

    class IValueMapper {
        InputType : DataViewType
        OutputType : DataViewType
        GetMapper()
    }
    class IValueMapperDist {
        DistType : DataViewType
        GetMapper()
    }
    IValueMapper <-- IValueMapperDist

    class ISchemaBindableMapper {
      Bind : (:IHostEnvironment, :RoleMappedSchema) : ISchemaBoundMapper
    }
    class SchemaBindablePredictorWrapperBase {
    Predictor : IPredictor
    ScoreType : DataViewType
    ValueMapper : IValueMapper
    ISchemaBindableMapper.Bind()
    BindCore()
    GetPredictionGetter(:DataViewRow, colSrc : int) : Delegate
    GetScoreType()
    GetValueGetter~TSrc, TDst~()
    }
    class SchemaBindablePredictorWrapper {
    BindCore : (:IChannel, :RoleMappedSchema)
    Create : (:HostEnvironment, :ModelLoadContext) : SchemaBindablePredictorWrapper
    GetScoreColumnKind : (:IPredictor) : string
    SaveAsOnnxCore
    SaveAsPfaCore
    SaveModel    
    }
    class SchemaBindableBinaryPredictorWrapper {
        BindCore()
    }
    ISchemaBindableMapper <-- SchemaBindablePredictorWrapperBase
    SchemaBindablePredictorWrapperBase <-- SchemaBindableBinaryPredictorWrapper 
    SchemaBindablePredictorWrapperBase <-- SchemaBindablePredictorWrapper 

    class SingleValueRowMapper

    class PredictionKind {
    BinaryClassification
    MulticlassClassification
    Regression
    MultiOutputRegression
    Ranking
    AnomalyDetection
    Clustering
    }

    %% The transform tree

    class IDataView
    class IDataTransform {
      Source : IDataView
    }
    <<interface>> IDataTransform
    class TransformBase {
        Host : IHost 
        Source : IDataView
        CanShuffle : bool
        OutputSchema : DataViewSchema
        IDataView.Schema
        ICanSaveModel.Save(:ModelSaveContext) : void
        SaveModel(:ModelSaveContext) : void
        GetRowCount() : long?
        GetRowCursor(:IEnumerable~DataViewSchema.Column~, :Random) : DataViewRowCursor
        GetRowCursorCore(:IEnumerable~DataViewSchema.Column~, :Random) : DataViewRowCursor
        GetRowCursorSet(:IEnumerable~DataViewSchema.Column~, :int, :Random) : DataViewRowCursor[]
        ShouldUseParallelCursors(:Func~int,bool~) : bool?
    }
    <<abstract>> TransformBase
    class RowToRowTransformBase {
      GetRowCount() : long?
    }
    <<abstract>> RowToRowTransformBase
    class RowToRowMapperTransformBase {
      InputSchema
      CreateGetters()
      GetDependenciesCore()
      IRowToRowMapper.GetDependencies()
      IRowToRowMapper.GetRow()
      MapColumnIndex()
    }

    class IDataScorerTransform {
    }
    <<interface>> IDataScorerTransform
    IDataTransform <-- IDataScorerTransform

    class RowToRowScorerBase {
      Bindable
      ApplyToData (:IHostEnvironment, :IDataView)
      ApplyToDataCore()
      CreateGetters()
      GetActive()
      GetDependenciesCore()
      GetGetterFromRow()
      GetGetterFromRow~T~()
      GetGetters()
      GetGettersFromRow()
      GetRowCursorCore()
      GetRowCursorSet()
      ITransformTemplate.ApplyToData()
      MapColumnIndex()
      SaveCore()
      SaveModel()
      ShouldUseParallelCursors()
      WantParallelCursors(predicate : Func<int, bool>) : bool
    }
    <<abstract>> RowToRowScorerBase
    IDataScorerTransform <-- RowToRowScorerBase

    class GenericScorer {
      OutputSchema
      ApplyToDataCore()
      Create()
      GetBindings()
      GetGetters()
      SaveCore : (:ModelSaveContext)
      WantParallelCursors(predicate : Func<int, bool>) : bool
    }
    <<sealed>> GenericScorer

    class GenericScorer_Bindings {
      Create(:ModelLoadContext, :IHostEnvironment, :ISchemaBindableMapper, :DataViewSchema) : GenericScorer_Bindings
      ApplyToSchema(:IHostEnvironment, :DataViewSchema) : GenericScorer_Bindings
      SaveModel(:ModelSaveContext) : void
    }

    BindingsBase <-- GenericScorer_Bindings
    
    class BinaryClassifierScorer
    class PredictedLabelScorerBase {
        Bindings
        OutputSchema
        EnsureCahedPosition()
        GetBindings()
        GetGetters()
        GetPredictedLabelGetter()
        ICanSaveOnnx.CanSaveOnnx()
        ICanSavePfa.CanSavePfa()
        ISaveAsOnnx.SaveAsOnnx()
        PredictedLabelPfa()
    }
    IDataView <-- IDataTransform
    IDataTransform <-- TransformBase
    TransformBase <-- RowToRowTransformBase
    RowToRowTransformBase <-- RowToRowMapperTransformBase 
    RowToRowMapperTransformBase <-- RowToRowScorerBase
    RowToRowScorerBase <-- GenericScorer
    PredictedLabelScorerBase <-- BinaryClassifierScorer
    RowToRowScorerBase <-- PredictedLabelScorerBase

    class BinaryClassifierScorer
    class PredictedLabelScorerBase

    class GenericScorer_Bindings {
      ApplyToSchema(:IHostEnvironment, :DataViewSchema) : GenericScorer_Bindings 
      Create()
      SaveModel()
    }
    class RowToRowScorerBase_BindingsBase {
      Mapper : ISchemaBoundMapper
      Suffix : string
      DerivedColumnnCount : int
      _crtScoreSet : uint
      _getScoreColumnSetId : AnnotationUtils_AnnontationGetter~uint~
      RowToRowMapper : ISchemaBoundRowMapper
      GetOutputNames(:ISchemaBoundMapper, suffix : string, namesDerived : string[]) : string[]
      LoadBaseInfo()
      SaveBase()
      SaveModel()
      GetColumnTypeCore()
      GetAnnotationsTypesCore()
      GetAnnotationTypeCore()
      GetAnnotationCore~TValue~()
      GetActiveMapperColumns(:bool[]) : Func~int,bool~
      GetScoreColumnSetId(iinfo : int, dst : ref uint)
    }
    RowToRowScorerBase_BindingsBase ..> ISchemaBoundMapper
    class ScorerBindingsBase {
      DerivedColumnnCount
      Suffix : string
      Mapper : ISchemaBoundMapper
      GetActiveMapperColumns()
      GetAnnotationCore()
      GetAnnotationTypeCore()
      GetColumnTypeCore()
      GetOutputNames()
      GetScoreColumnSetId()
      LoadBaseInfo()
      SaveBase()
      SaveModel()
      ScorerBindingsBase()
    }
    <<abstract>> ScorerBindingsBase
    class ColumnBindingsBase {
      Input : DataViewSchema
      AsSchema : DataViewSchema
      CreateSchema() : DataViewSchema
      GetAnnotationCore()
      GetAnnotationGetterDelegate()
      GetAnnotationTypeCore()
      GetAnnotationTypeOrNull()
      GetAnnotationTypes()
      GetColumnName()
      MapColumnIndex()
      MapInfoToCol(iinfo : int)
      TryGetColumnIndex(name : string, out int col)
      TryGetColumnIndexCore(name : string, out int info)
    }
    RowToRowScorerBase_BindingsBase <-- GenericScorer_Bindings
    ScorerBindingsBase <-- RowToRowScorerBase_BindingsBase
    ColumnBindingsBase <-- ScorerBindingsBase

    class DataViewRow {
      Position : ulong
      Batch : long
      Schema : DataViewSchema
      GetIdGetter()
      IsColumnActive(:DataViewSchema.Column) : bool
      GetGetter()
    }
    class DataViewRowCursor {
      MoveNext()
    }
    class SynchronizedCursorBase
    class RowToRowScorerBase_Cursor {
      Schema
      GetGetter()
      IsColumnActive()
    }
    DataViewRow <-- DataViewRowCursor
    DataViewRowCursor <-- SynchronizedCursorBase
    SynchronizedCursorBase <-- RowToRowScorerBase_Cursor

    class IPredictor {
        PredictionKind
    }
    class IPredictorProducing~TOutput~
    class ModelParametersBase~TOutput~ {
        Host : IHost 
        PredictionKind
        SaveCore()
    }
    class TreeEnsembleModelParameters
    class GamModelParametersBase
    IPredictor <-- IPredictorProducing
    IPredictorProducing <-- ModelParametersBase 
    ModelParametersBase <-- TreeEnsembleModelParameters
    ModelParametersBase <-- GamModelParametersBase

    class ISchemaBoundMapper {
      InputRoleMappedSchema : RoleMappedSchema
      OutputSchema : DataViewSchema
      Bindable : ISchemaBindableMapper
      GetInputColumnRoles : () : IEnumerable~KeyValuePair~RoleMappedSchema.ColumnRole, string~~
    }
    ISchemaBoundMapper ..> ISchemaBindableMapper : <<use>>
    class ISchemaBoundRowMapper {
        InputSchema : DataViewSchema
        GetDependenciesForNewColumns()
        GetRow(:DataViewRow, activeColumns : IEnumerable~DataViewSchema.Column~)
    }
    class SchemaBindablePredictorWrapperBase_SingleValueRowMapper {
        _parent : SchemaBindablePredictorWrapperBase
        Bindable : ISchemaBindableMapper
        InputRoleMappedSchema : RoleMappedSchema
        InputSchema
        OutputSchema : DataViewSchema
        GetInputColumnRoles()
        ISchemaBoundRowMapper.GetDependenciesForNewColumns()
        ISchemaBoundRowMapper.GetRow()
    }
    ISchemaBoundMapper <-- ISchemaBoundRowMapper
    ISchemaBoundRowMapper <-- SchemaBindablePredictorWrapperBase_SingleValueRowMapper

    class IRowToRowMapper {
      InputSchema : DataViewSchema
      OutputSchema : DataViewSchema
      GetDependencies() : IEnumerable~SchemaShape.Column~ 
      GetRow(:DataViewRow, activeColumns : IEnumerable~DataViewSchema.Column~) : DataViewRow
    }
    <<interface>> IRowToRowMapper

    class IEstimator~TTransformer~ {
      Fit(:IDataView) : TTransformer
      GetOutputSchema(:SchemaShape) : SchemaShape
    }
    <<interface>> IEstimator~TTransformer~

    class ITransformer {
      GetOutputSchema(:SchemaShape) : SchemaShape
      Transform(:IDataView) : IDataView
      IsRowMapper : bool
      GetRowToRowMapper :(inputSchema : DataViewSchema) : IRowToRowMapper
    }    

    class ITrainerEstimator~TTransformer, TModel~ {
      Info : TrainerInfo
    }
    <<interface>> ITrainerEstimator~TTransformer, TModel~
    IEstimator~TTransformer~ <-- ITrainerEstimator~TTransformer, TModel~

    class ITrainer {
      Info : TrainerInfo
      PredictionKind : PredictionKind
      Train(:TrainContext) : IPredictor
    }
    <<interface>> ITrainer

    class ITrainer~TPredictor~ {
      Train(:TrainContext) : TPredictor
    }
    <<interface>> ITrainer~TPredictor~ 
    ITrainer <-- ITrainer~TPredictor~ 

    class TrainerEstimatorBase~TTransformer,TModel~ {
      FeatureColumn
      LabelColumn
      WeightColumn
      Host
      Info
      PredictionKind
      ITrainer.PredictionKind
      NoTrainingInstancesMessage
      CheckInputSchema()
      CheckLabelCompatible()
      Fit : (:IDataView) 
      GetOutputColumnsCore : (:SchemaShape)
      GetOutputSchema : (:SchemaShape)
      ITrainer.Train(:TrainContext)
      MakeRoles()
      MakeTransformer()
      TrainModelCore()
      TrainTransformer()
    }
    ITrainerEstimator~TTransformer, TModel~ <-- TrainerEstimatorBase~TTransformer,TModel~
    ITrainer~TPredictor~ <-- TrainerEstimatorBase~TTransformer,TModel~

    class TrainerEstimatorBaseWithGroupId~TTransformer,TModel~ {
        GroupIdColumn
        MakeRoles()
    }
    TrainerEstimatorBase~TTransformer,TModel~  <-- TrainerEstimatorBaseWithGroupId~TTransformer,TModel~

    class LightGbmTrainerBase~TOptions,TOutput,TTransformer,TModel~ {
      FeatureCount : int
      GbmOptions : Dictionary~string, object~
      Info
      LightGbmTrainerOptions : TOptions
      ParallelTraining
      TrainedEnsemble : InternalTreeEnsemble
      CheckAndUpdateParametersBeforeTraining()
      CheckDataValid()
      ConstructCategoricalFeatureMetadata()
      ConvertNanLabels()
      CopyToArray()
      CopyToCsr()
      CreateCursorFactory()
      CreateDatasetFromSamplingData()
      CreatePredictor()
      DefaultLearningRate()
      DefaultMinDataPerLeaf()
      DefaultNumLeaves()
      DetectDensity()
      GetCategoricalBoundires()
      GetCategoricalMetadata()
      GetDefaultParameters()
      GetFeatureValueDense()
      GetFeatureValueSparse()
      GetGbmParameters()
      GetMetaInfo()
      GetNumSampleRow()
      InitializeBeforeTraining()
      InitParallelTraining()
      LoadDataset()
      LoadTrainingData()
      LoadValidationData()
      MoveMany()
      TrainCore()
      TrainModelCore(:TrainContext)
    }
    TrainerEstimatorBaseWithGroupId~TTransformer,TModel~ <-- LightGbmTrainerBase~TOptions,TOutput,TTransformer,TModel~

    class LightGbmRegressionTrainer {
      PredictionKind
      CheckAndUpdateParametersBeforeTraining()
      CheckDataValid()
      CreatePredictor()
      Fit(trainData : IDataView, validationData : IDataView)
      GetOutputColumnsCore(:SchemaShape)
      MakeTransformer()
    }
    LightGbmTrainerBase~TOptions,float,TTransformer,TModel~ <-- LightGbmRegressionTrainer

    class ITransformTemplate {
      ApplyToData(:IHostEnvironment, :IDataView) : IDataTransform
    }
    <<interface>> ITransformTemplate
    IDataTransform <-- ITransformTemplate
    class IDataScorerTransform {
    }
    <<interface>> IDataScorerTransform
    class RowToRowMapperTransformBase {
      InputSchema : DataViewSchema
      CreateGetters()
      GetDependenciesCore()
      IRowToRowMapper.GetDependencies()
      IRowToRowMapper.GetRow()
      MapColumnIndex(isSrc: out bool, col: int)
    }
    <<abstract>> RowToRowMapperTransformBase
    RowToRowTransformBase <-- RowToRowMapperTransformBase
    IRowToRowMapper <-- RowToRowMapperTransformBase
    class RowToRowScorerBase {
      _getGetterFromRowMethodInfo
      ApplyToData
      ApplyToDataCore
      Bindable
      CreateGetters
      GetActive
      GetBinding
      GetDependenciesCore
      GetGetterFromRow
      GetGetterFromRow~T~
      GetGetters
      GetGettersFromRow
      GetRowCursorCore
      GetRowCursorSet
      ITransformTemplate.ApplyToData
      MapColumnIndex
      SaveCore
    }
    <<abstract>> RowToRowScorerBase
    RowToRowMapperTransformBase <-- RowToRowScorerBase
    class PredictedLabelScorerBase {
    }
    <<abstract>> PredictedLabelScorerBase

    class MulticlassClassificationScorer {
    }
    PredictedLabelScorerBase <-- MulticlassClassificationScorer 
    
    class OneToOneTransformerBase {
      OutputSchema
      ActiveSource
      ColumnIndex (info : int)
      CreateGetters
      ExceptGetSlotCursor
      GetColumnTypeCore
      GetDependenciesCore
      GetGetterCore
      GetRowCursorCore
      GetRowCursorSet
      GetSlotCursorCore
      GetSlotTypeCore
      GetSrcGetter
      GetSrcGetter~T~
      MapColumnIndex
      SaveBase
      ShouldUseParallelCursors
      WantParallelCursors(:Func<int, bool>) : bool
    }
    <<abstract>> OneToOneTransformerBase
    RowToRowMapperTransformBase <-- OneToOneTransformerBase