classDiagram 
    class IPredictionTransformer 
    
    class IFeaturePredictionTransformer {
        FeatureColumnName : string
        FeatureColumnType : DataViewType
    }

    IPredictionTransformer <-- IFeaturePredictionTransformer  

    class PredictionTransformerBase~TModel~ {
        Model 
        ModelAsPredictor : IPredictor
        Host : IHost
        BindableMapper : ISchemaBindableMapper
        TrainSchema : DataViewSchema
        Scorer : RowToRowScorerBase
        InitializeLogic : (:IHost, :ModelLoadContext)
        GetOutputSchema(:DataViewSchema) : DataViewSchema
        Transform( :IDataView )
    }
    class SingleFeaturePredictionTransformerBase~TModel~ {
        FeatureColumnName : string
        FeatureColumnType : DataViewType
        GetGenericScorer: () : GenericScorer
        GetOutputSchema()
        SaveCore()
        SaveModel()
    }
    class RegressionPredictionTransformer {
        SaveCore()
    }
    class BinaryPredictionTransformer {
        ThresholdColumn : string
        Threshold : float
        LabelColumnName : string
        SetScorer() 
        InitializationLogic()
        SaveCore()
    }

    PredictionTransformerBase <-- SingleFeaturePredictionTransformerBase
    SingleFeaturePredictionTransformerBase <-- RegressionPredictionTransformer
    SingleFeaturePredictionTransformerBase <-- BinaryPredictionTransformer

    class IValueMapper {
        InputType : DataViewType
        OutputType : DataViewType
        GetMapper()
    }
    class IValueMapperDist {
        DistType : DataViewType
        GetMapper()
    }
    IValueMapper <-- IValueMapperDist

    class SchemaBindablePredictorWrapperBase {
    Predictor : IPredictor
    ScoreType : DataViewType
    ValueMapper
    BindCore()
    GetPredictionGetter(:DataViewRow, colSrc : int) : Delegate
    GetScoreType()
    GetValueGetter~TSrc, TDst~()
    }
    class SchemaBindablePredictorWrapper {
    BindCore : (:IChannel, :RoleMappedSchema)
    Create : (:HostEnvironment, :ModelLoadContext) : SchemaBindablePredictorWrapper
    GetScoreColumnKind : (:IPredictor) : string
    SaveAsOnnxCore
    SaveAsPfaCore
    SaveModel    
    }
    class SchemaBindableBinaryPredictorWrapper {
        BindCore()
    }
    SchemaBindablePredictorWrapperBase <-- SchemaBindableBinaryPredictorWrapper 
    SchemaBindablePredictorWrapperBase <-- SchemaBindablePredictorWrapper 

    class PredictionKind {
    BinaryClassification
    MulticlassClassification
    Regression
    MultiOutputRegression
    Ranking
    AnomalyDetection
    Clustering
    }

    class TransformBase {
        Host : IHost 
        Source : IDataView
        Transform( :IDataView )
    }
    class RowToRowTransformBase 
    class RowToRowMapperTransformBase 
    TransformBase <-- RowToRowTransformBase
    RowToRowTransformBase <-- RowToRowMapperTransformBase 

    class IPredictor {
        PredictionKind
    }
    class IPredictorProducing~TOutput~
    class ModelParametersBase~TOutput~ {
        Host : IHost 
        PredictionKind
        SaveCore()
    }
    class TreeEnsembleModelParameters
    class GamModelParametersBase
    IPredictor <-- IPredictorProducing
    IPredictorProducing <-- ModelParametersBase 
    ModelParametersBase <-- TreeEnsembleModelParameters
    ModelParametersBase <-- GamModelParametersBase

    class ISchemaBindableMapper {
      Bind : (:IHostEnvironment, :RoleMappedSchema) : ISchemaBoundMapper
    }

    class ISchemaBoundMapper {
      InputRoleMappedSchema : RoleMappedSchema
      OutputSchema : DataViewSchema
      Bindable : ISchemaBindableMapper
      GetInputColumnRoles : () : IEnumerable~KeyValuePair~RoleMappedSchema.ColumnRole, string~~
    }

    class GenericScorer {
      OutputSchema
      ApplyToDataCore
      Create
      GetBindings
      GetGetters
      SaveCore : (:ModelSaveContext)
      WantParallelCursors
    }

    class TrainerEstimatorBase~TTransformer,TModel~ {
      FeatureColumn
      LabelColumn
      Host
      Info
      Fit : (:IDataView) 
      GetOutputColumnsCore : (:SchemaShape)
      GetOutputSchema : (:SchemaShape)
    }
    
        