classDiagram 

    class IPredictionTransformer~TModel~ {
      Model : TModel
    }
    
    class IFeaturePredictionTransformer {
        FeatureColumnName : string
        FeatureColumnType : DataViewType
    }

    IPredictionTransformer~TModel~ <-- IFeaturePredictionTransformer  

    class PredictionTransformerBase~TModel~ {
        Model 
        ModelAsPredictor : IPredictor
        Host : IHost
        BindableMapper : ISchemaBindableMapper
        TrainSchema : DataViewSchema
        Scorer : RowToRowScorerBase
        InitializeLogic : (:IHost, :ModelLoadContext)
        GetOutputSchema(:DataViewSchema) : DataViewSchema
        Transform( :IDataView )
    }
    class SingleFeaturePredictionTransformerBase~TModel~ {
        FeatureColumnName : string
        FeatureColumnType : DataViewType
        GetGenericScorer: () : GenericScorer
        GetOutputSchema()
        SaveCore()
        SaveModel()
    }
    class RegressionPredictionTransformer~TModel~ {
        SaveCore()
    }
    class BinaryPredictionTransformer~TModel~ {
        ThresholdColumn : string
        Threshold : float
        LabelColumnName : string
        SetScorer() 
        InitializationLogic()
        SaveCore()
    }

    IPredictionTransformer~TModel~ <-- PredictionTransformerBase  
    PredictionTransformerBase <-- SingleFeaturePredictionTransformerBase~TModel~
    SingleFeaturePredictionTransformerBase~TModel~ <-- RegressionPredictionTransformer~TModel~
    SingleFeaturePredictionTransformerBase~TModel~ <-- BinaryPredictionTransformer~TModel~

    class IValueMapper {
        InputType : DataViewType
        OutputType : DataViewType
        GetMapper()
    }
    class IValueMapperDist {
        DistType : DataViewType
        GetMapper()
    }
    IValueMapper <-- IValueMapperDist

    class SchemaBindablePredictorWrapperBase {
    Predictor : IPredictor
    ScoreType : DataViewType
    ValueMapper
    BindCore()
    GetPredictionGetter(:DataViewRow, colSrc : int) : Delegate
    GetScoreType()
    GetValueGetter~TSrc, TDst~()
    }
    class SchemaBindablePredictorWrapper {
    BindCore : (:IChannel, :RoleMappedSchema)
    Create : (:HostEnvironment, :ModelLoadContext) : SchemaBindablePredictorWrapper
    GetScoreColumnKind : (:IPredictor) : string
    SaveAsOnnxCore
    SaveAsPfaCore
    SaveModel    
    }
    class SchemaBindableBinaryPredictorWrapper {
        BindCore()
    }
    SchemaBindablePredictorWrapperBase <-- SchemaBindableBinaryPredictorWrapper 
    SchemaBindablePredictorWrapperBase <-- SchemaBindablePredictorWrapper 

    class PredictionKind {
    BinaryClassification
    MulticlassClassification
    Regression
    MultiOutputRegression
    Ranking
    AnomalyDetection
    Clustering
    }

    %% The transform tree

    class IDataView
    class IDataTransform {
      Source : IDataView
    }
    class TransformBase {
        Host : IHost 
        Source : IDataView
        CanShuffle
        IDataView.Schema
        GetRowCount()
        GetRowCursor()
        GetRowCursorCore()
        GetRowCursorSet()
    }
    class RowToRowTransformBase {
      GetRowCount()
    }
    class RowToRowMapperTransformBase {
      InputSchema
      CreateGetters()
      GetDependenciesCore()
      IRowToRowMapper.GetDependencies()
      IRowToRowMapper.GetRow()
      MapColumnIndex()
    }       
    class RowToRowScorerBase {
      Bindable
      ApplyToData (:IHostEnvironment, :IDataView)
      ApplyToDataCore()
      CreateGetters()
      GetActive()
      GetDependenciesCore()
      GetGetterFromRow()
      GetGetterFromRow~T~()
      GetGetters()
      GetGettersFromRow()
      GetRowCursorCore()
      GetRowCursorSet()
      ITransformTemplate.ApplyToData()
      MapColumnIndex()
      SaveCore()
      SaveModel()
      ShouldUseParallelCursors()
      WantParallelCursors()
    }

    class GenericScorer {
      OutputSchema
      ApplyToDataCore
      Create
      GetBindings
      GetGetters
      SaveCore : (:ModelSaveContext)
      WantParallelCursors
    }
    class BinaryClassifierScorer
    class PredictedLabelScorerBase {
        Bindings
        OutputSchema
        EnsureCahedPosition()
        GetBindings()
        GetGetters()
        GetPredictedLabelGetter()
        ICanSaveOnnx.CanSaveOnnx()
        ICanSavePfa.CanSavePfa()
        ISaveAsOnnx.SaveAsOnnx()
        PredictedLabelPfa()
    }
    IDataView <-- IDataTransform
    IDataTransform <-- TransformBase
    TransformBase <-- RowToRowTransformBase
    RowToRowTransformBase <-- RowToRowMapperTransformBase 
    RowToRowMapperTransformBase <-- RowToRowScorerBase
    RowToRowScorerBase <-- GenericScorer
    PredictedLabelScorerBase <-- BinaryClassifierScorer
    RowToRowScorerBase <-- PredictedLabelScorerBase

    class BinaryClassifierScorer
    class PredictedLabelScorerBase

    class GenericScorer_Bindings {
      ApplyToSchema(:IHostEnvironment, :DataViewSchema) : GenericScorer_Bindings 
      Create()
      SaveModel()
    }
    class RowToRowScorerBase_BindingsBase {
      RowToRowMapper : ISchemaBoundRowMapper
    }
    class ScorerBindingsBase {
      DerivedColumnnCount
      Suffix : string
      Mapper : ISchemaBoundMapper
      GetActiveMapperColumns()
      GetAnnotationCore()
      GetAnnotationTypeCore()
      GetColumnTypeCore()
      GetOutputNames()
      GetScoreColumnSetId()
      LoadBaseInfo()
      SaveBase()
      SaveModel()
      ScorerBindingsBase()
    }
    class ColumnBindingsBase {
      Input : DataViewSchema
      AsSchema : DataViewSchema
      CreateSchema() : DataViewSchema
      GetAnnotationCore()
      GetAnnotationGetterDelegate()
      GetAnnotationTypeCore()
      GetAnnotationTypeOrNull()
      GetAnnotationTypes()
      GetColumnName()
      MapColumnIndex()
      MapInfoToCol(iinfo : int)
      TryGetColumnIndex(name : string, out int col)
      TryGetColumnIndexCore(name : string, out int info)
    }
    RowToRowScorerBase_BindingsBase <-- GenericScorer_Bindings
    ScorerBindingsBase <-- RowToRowScorerBase_BindingsBase
    ColumnBindingsBase <-- ScorerBindingsBase

    class DataViewRow {
      Position : ulong
      Batch : long
      Schema : DataViewSchema
      GetIdGetter()
      IsColumnActive(:DataViewSchema.Column) : bool
      GetGetter()
    }
    class DataViewRowCursor {
      MoveNext()
    }
    class SynchronizedCursorBase
    class RowToRowScorerBase_Cursor {
      Schema
      GetGetter()
      IsColumnActive()
    }
    DataViewRow <-- DataViewRowCursor
    DataViewRowCursor <-- SynchronizedCursorBase
    SynchronizedCursorBase <-- RowToRowScorerBase_Cursor

    class IPredictor {
        PredictionKind
    }
    class IPredictorProducing~TOutput~
    class ModelParametersBase~TOutput~ {
        Host : IHost 
        PredictionKind
        SaveCore()
    }
    class TreeEnsembleModelParameters
    class GamModelParametersBase
    IPredictor <-- IPredictorProducing
    IPredictorProducing <-- ModelParametersBase 
    ModelParametersBase <-- TreeEnsembleModelParameters
    ModelParametersBase <-- GamModelParametersBase

    class ISchemaBindableMapper {
      Bind : (:IHostEnvironment, :RoleMappedSchema) : ISchemaBoundMapper
    }

    class ISchemaBoundMapper {
      InputRoleMappedSchema : RoleMappedSchema
      OutputSchema : DataViewSchema
      Bindable : ISchemaBindableMapper
      GetInputColumnRoles : () : IEnumerable~KeyValuePair~RoleMappedSchema.ColumnRole, string~~
    }

    class TrainerEstimatorBase~TTransformer,TModel~ {
      FeatureColumn
      LabelColumn
      WeightColumn
      Host
      Info
      PredictionKind
      ITrainer.PredictionKind
      NoTrainingInstancesMessage
      CheckInputSchema()
      CheckLabelCompatible()
      Fit : (:IDataView) 
      GetOutputColumnsCore : (:SchemaShape)
      GetOutputSchema : (:SchemaShape)
      ITrainer.Train(:TrainContext)
      MakeRoles()
      MakeTransformer()
      TrainModelCore()
      TrainTransformer()
    }
    class TrainerEstimatorBaseWithGroupId~TTransformer,TModel~ {
        GroupIdColumn
        MakeRoles()
    }
    TrainerEstimatorBase~TTransformer,TModel~  <-- TrainerEstimatorBaseWithGroupId~TTransformer,TModel~

    class LightGbmTrainerBase~TOptions,TOutput,TTransformer,TModel~ {
      FeatureCount 
      GbmOptions
      Info
      LightGbmTrainerOptions
      ParallelTraining
      TrainedEnsemble
      CheckAndUpdateParametersBeforeTraining()
      CheckDataValid()
      ConstructCategoricalFeatureMetadata()
      ConvertNanLabels()
      CopyToArray()
      CopyToCsr()
      CreateCursorFactory()
      CreateDatasetFromSamplingData()
      CreatePredictor()
      DefaultLearningRate()
      DefaultMinDataPerLeaf()
      DefaultNumLeaves()
      DetectDensity()
      GetCategoricalBoundires()
      GetCategoricalMetadata()
      GetDefaultParameters()
      GetFeatureValueDense()
      GetFeatureValueSparse()
      GetGbmParameters()
      GetMetaInfo()
      GetNumSampleRow()
      InitializeBeforeTraining()
      InitParallelTraining()
      LoadDataset()
      LoadTrainingData()
      LoadValidationData()
      MoveMany()
      TrainCore()
      TrainModelCore(:TrainContext)
    }
    TrainerEstimatorBaseWithGroupId~TTransformer,TModel~ <-- LightGbmTrainerBase~TOptions,TOutput,TTransformer,TModel~

    class LightGbmRegressionTrainer {
      PredictionKind
      CheckAndUpdateParametersBeforeTraining()
      CheckDataValid()
      CreatePredictor()
      Fit(trainData : IDataView, validationData : IDataView)
      GetOutputColumnsCore(:SchemaShape)
      MakeTransformer()
    }
    LightGbmTrainerBase~TOptions,float,TTransformer,TModel~ <-- LightGbmRegressionTrainer
